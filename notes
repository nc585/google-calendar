# [START calendar_quickstart]
from __future__ import print_function
import datetime
import pickle
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request

# If modifying these scopes, delete the file token.pickle.
SCOPES = ['https://www.googleapis.com/auth/calendar']

def main():
    """Shows basic usage of the Google Calendar API.
    Prints the start and name of the next 10 events on the user's calendar.
    """
    creds = None
    # The file token.pickle stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server()
        # Save the credentials for the next run
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    service = build('calendar', 'v3', credentials=creds)

    # Call the Calendar API
    now = datetime.datetime.utcnow().isoformat() + 'Z' # 'Z' indicates UTC time
    
    # #list available Google calendars in the user account
    # page_token = None
    # calendar_list = service.calendarList().list(pageToken=page_token).execute()
    # for calendar_list_entry in calendar_list['items']:
    #     print(calendar_list_entry['summary'])

    print('Getting the upcoming 10 events')
    events_result = service.events().list(calendarId='46gnvciofevvvsrrjpf8qri3j52njfun@import.calendar.google.com', timeMin=now,
                                        maxResults=10, singleEvents=True,
                                        orderBy='startTime').execute()
    #events = events_result.get('items', [])
    for event in events_result['items']:
        #print(event['summary'])
        #print(events_result['items'][0])
        #print(events_result['items']['id'])
        

# Print the updated date.
    # print(updated_event['updated'])

    # event_option = {
    #     'summary': 'Google I/O 2015',
    #     'location': '800 Howard St., San Francisco, CA 94103',
    #     'description': 'A chance to hear more about Google\'s developer products.',
    #     'start': {
    #         'dateTime': '2019-04-28T09:00:00-07:00',
    #         'timeZone': 'America/Los_Angeles',
    #     },
    #     'end': {
    #         'dateTime': '2019-04-28T17:00:00-07:00',
    #         'timeZone': 'America/Los_Angeles',
    #     },
    # }

    # event = service.events().insert(calendarId='primary', body=event_option).execute()
    # print(type(event))
    # print('Event created: %s' % (event.get('htmlLink')))

if __name__ == '__main__':
    main()
# [END calendar_quickstart]